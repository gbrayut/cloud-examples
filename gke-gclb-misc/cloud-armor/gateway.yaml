# kubectl apply -f https://raw.githubusercontent.com/gbrayut/cloud-examples/refs/heads/main/gke-gclb-misc/base-whereami.yaml

# Gateway API option using gke-l7-global-external-managed Envoy based proxy
# see https://cloud.google.com/kubernetes-engine/docs/how-to/gatewayclass-capabilities
kind: Gateway
apiVersion: gateway.networking.k8s.io/v1
metadata:
  name: test-armor
  namespace: test-gclb
  #annotations:
  #  # Assign certs via Certificate Manager https://cloud.google.com/kubernetes-engine/docs/how-to/secure-gateway#secure-using-certificate-manager
  #  networking.gke.io/certmap: gke-gateway-map
spec:
  gatewayClassName: gke-l7-regional-external-managed
  listeners:
  - name: http
    protocol: HTTP
    port: 80

  - name: https
    protocol: HTTPS
    port: 443

    # Regional LB certificate https://cloud.google.com/kubernetes-engine/docs/how-to/secure-gateway#regional-gateway
    tls:
      mode: Terminate    # Must terminate, Passthrough only supported on a few GCLB classes
      options:
        networking.gke.io/cert-manager-certs: uc1-wildcard    # Can specify multiple comma separted certs for SNI based SAN matching

  #addresses:
  #- type: NamedAddress
  #  value: whereami-static-ip
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: whereami-route-test
  namespace: test-gclb
spec:
  parentRefs:
  - name: test-armor
  #hostnames:
  #- "*.example.com"
  rules:

  # redirect /docs to https://gateway-api.sigs.k8s.io/
  - matches:
    - path:
        type: PathPrefix
        value: /docs
    filters:
    - type: RequestRedirect
      requestRedirect:
        hostname: gateway-api.sigs.k8s.io
        path:
          type: ReplaceFullPath
          replaceFullPath: /
        scheme: https
        statusCode: 302

  # Send everything else to gke-gclb-misc/base-whereami-spread.yaml
  - backendRefs:
    - name: whereami
      port: 80
---
# https://cloud.google.com/kubernetes-engine/docs/how-to/configure-gateway-resources#configure_cloud_armor
# Changes should be visible in Load Balancers and Backends section at https://console.cloud.google.com/net-services/loadbalancing/list/loadBalancers
apiVersion: networking.gke.io/v1
kind: GCPBackendPolicy
metadata:
  name: whereami-backend-policy
  namespace: test-gclb
spec:
  default:
    securityPolicy: uc1-security-policy   # See gke-gclb-misc/cloud-armor/README.md
  targetRef:
    group: ""
    kind: Service
    name: whereami  # The above settings will only effect the whereami BackendService

# Trying to attach to HTTPRoute or Gateway will result in the following error condition on the GCPBackendPolicy resource:
# the target resource of ServicePolicy of type GCPBackendPolicy test-gclb/httproute-policy has invalid Kind: HTTPRoute, want Service or ServiceImport
